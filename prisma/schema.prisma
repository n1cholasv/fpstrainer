// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Lesson {
  id          String   @id @default(cuid())
  title       String
  description String
  objectives  String[]
  gameRecommendations String[]
  difficulty  Int      @default(1) // 1-5 scale
  minimumScore Float?   // Required score to pass
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  userProgress UserProgress[]
  measurements Measurement[]
  
  @@map("lessons")
}

model UserProgress {
  id        String   @id @default(cuid())
  lessonId  String
  lesson    Lesson   @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  
  status    ProgressStatus @default(NOT_STARTED)
  attempts  Int      @default(0)
  bestScore Float?
  lastScore Float?
  completed Boolean  @default(false)
  completedAt DateTime?
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@map("user_progress")
}

model Measurement {
  id       String @id @default(cuid())
  lessonId String
  lesson   Lesson @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  
  type     MeasurementType
  value    Float
  unit     String
  notes    String?
  
  recordedAt DateTime @default(now())
  
  @@map("measurements")
}

enum ProgressStatus {
  NOT_STARTED
  IN_PROGRESS  
  COMPLETED
  MASTERED
}

enum MeasurementType {
  ACCURACY
  REACTION_TIME
  TRACKING_SCORE
  CROSSHAIR_PLACEMENT
  FLICK_SPEED
  TARGET_SWITCHING
  CUSTOM
}
